(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{490:function(e,t,a){"use strict";a.r(t);var o=a(2),n=Object(o.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"journal-day-1-week-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#journal-day-1-week-2"}},[e._v("#")]),e._v(" Journal Day 1 Week 2")]),e._v(" "),a("p",[e._v("What is Scope ?")]),e._v(" "),a("p",[e._v("What is Hoisting ?")]),e._v(" "),a("p",[e._v("In what cases might you use let vs const vs var?")]),e._v(" "),a("ol",[a("li",[a("p",[e._v("Scope is how far the variable move, and how much code they are in. Var is a global scope, so even if you make it in a function, it will go everywhere. Let and Const are local scopes, meaning they only exist in where they were created.")])]),e._v(" "),a("li",[a("p",[e._v("Hoisting is where you call the variable before it is defined. The variable gets made, but undefined.")])]),e._v(" "),a("li",[a("p",[e._v("You would use var if you want a global variable, but the dangers is it could override something you don't mean to. Let is if you want to update something, but just inside a function, and const is if you want something absolutely stuck, and doesn't change at all.")])])]),e._v(" "),a("p",[e._v("Link to Work\nhttps://github.com/JordanWilker/Week-2-Day-1")])])}),[],!1,null,null,null);t.default=n.exports}}]);